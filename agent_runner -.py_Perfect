# agent_runner.py - Streamlit-based AI Portfolio Agent (With Robust Input Handling)

import streamlit as st
import json
from langchain.agents import initialize_agent, Tool
from langchain_openai import ChatOpenAI
from langchain.agents.agent_types import AgentType
from app.plot import get_price_forecast_plot
from app.utils import get_stock_price
from app.pdf_parser import extract_text_from_pdf, parse_portfolio_from_text
import requests
import re
import pandas as pd

st.set_page_config(page_title="AI Portfolio Agent", layout="wide")
st.title("ü§ñ Autonomous Portfolio Agent")

# --- Input Section ---
st.markdown("### Upload Portfolio (PDF or JSON)")
pdf_file = st.file_uploader("Upload PDF", type=["pdf"])

portfolio_data = []
if pdf_file:
    text = extract_text_from_pdf(pdf_file)
    portfolio_data = parse_portfolio_from_text(text)
    st.success("‚úÖ Portfolio extracted from PDF")
    st.json(portfolio_data)
else:
    example = '''[
      {"symbol": "AAPL", "quantity": 10, "buy_price": 150},
      {"symbol": "TSLA", "quantity": 5, "buy_price": 600}
    ]'''
    user_input = st.text_area("Paste Portfolio JSON", example, height=150)
    if user_input:
        try:
            portfolio_data = json.loads(user_input)
        except Exception as e:
            st.error(f"Invalid JSON: {e}")

# --- Preferences ---
risk_rating = st.selectbox("Risk Rating", ["", "Low", "Medium", "High"], format_func=lambda x: x if x else "Select Risk Rating")
esg_preference = st.checkbox("Prefer ESG-compliant?")
sectors = st.multiselect("Preferred Sectors", [
    "Technology", "Natural Resources", "Banking", "F&B", "Healthcare", "Utilities"
])

# --- Tool Definitions ---
def predict_risk_tool(input_data):
    try:
        print("üß™ Debug - LangChain input to PredictRisk tool:", input_data)

        if isinstance(input_data, dict) and "portfolio" in input_data:
            portfolio = input_data["portfolio"]
        elif isinstance(input_data, list):
            portfolio = input_data
        elif isinstance(input_data, str):
            st.warning("‚ö†Ô∏è Input was a string (e.g., 'AAPL,TSLA'). Using current user portfolio instead.")
            portfolio = portfolio_data
        else:
            raise ValueError("Invalid input format")

        response = requests.post("http://localhost:8000/predict-risk", json={"portfolio": portfolio})
        if response.ok:
            return response.json()
        else:
            st.error("‚ùå Risk prediction service failed.")
            return {"error": "Risk prediction failed."}
    except Exception as e:
        st.error(f"‚ùå Risk prediction exception: {e}")
        return {"error": str(e)}

def gpt_analysis_tool(prompt_str):
    try:
        portfolio_match = re.search(r"Portfolio:\s+(.*?)\s+Risk Rating:", prompt_str, re.DOTALL)
        rating_match = re.search(r"Risk Rating:\s+(.*?)\s+ESG Preference:", prompt_str)
        esg_match = re.search(r"ESG Preference:\s+(.*?)\s+Preferred Sectors:", prompt_str)
        sectors_match = re.search(r"Preferred Sectors:\s+(.*)", prompt_str)

        portfolio = json.loads(portfolio_match.group(1).strip()) if portfolio_match else []
        rating = rating_match.group(1).strip() if rating_match else "Medium"
        esg = esg_match.group(1).strip().lower() == "yes" if esg_match else False
        sectors = [s.strip() for s in sectors_match.group(1).split(',')] if sectors_match else []

        payload = {
            "portfolio": portfolio,
            "risk_rating": rating,
            "esg_preference": esg,
            "sectors": sectors
        }

        response = requests.post("http://localhost:8000/analyze-portfolio-gpt", json=payload)
        return response.json() if response.ok else {"error": "GPT analysis failed."}
    except Exception as e:
        return {"error": f"Parsing error: {e}"}

def plot_tool(symbols):
    validated = []
    for sym in symbols:
        try:
            price = get_stock_price(sym)
            if price:
                validated.append(sym)
        except:
            continue
    return get_price_forecast_plot(validated)

# --- Logging Wrapper ---
def log_tool_call(tool_name, input_data, func):
    st.session_state.tool_trace.append({"tool": tool_name, "input": input_data})
    output = func(input_data)
    st.session_state.tool_trace[-1]["output"] = output
    return output

# --- Agent Execution ---
ml_risk_result = predict_risk_tool(portfolio_data)
predicted_risk = ml_risk_result.get("risk_rating", risk_rating if risk_rating else "Medium")

if ml_risk_result:
    with st.expander("üìâ Risk Rating Comparison"):
        col1, col2 = st.columns(2)
        col1.metric("User Risk Rating", risk_rating if risk_rating else "Not selected")
        col2.metric("ML-Predicted Risk", predicted_risk)

def run_agent():
    if not portfolio_data:
        st.warning("Please provide portfolio data.")
        return

    MAX_PORTFOLIO_ITEMS = 10
    portfolio_trimmed = portfolio_data[:MAX_PORTFOLIO_ITEMS]
    portfolio_str = json.dumps(portfolio_trimmed, indent=2)

    if len(portfolio_data) > MAX_PORTFOLIO_ITEMS:
        st.warning(f"üìè Portfolio has too many items. Only the first {MAX_PORTFOLIO_ITEMS} will be used for GPT analysis.")

    tools = [
        Tool(name="PredictRisk", func=lambda x: log_tool_call("PredictRisk", x, predict_risk_tool), description="Predicts portfolio risk from given data"),
        Tool(name="GPTAnalysis", func=lambda x: log_tool_call("GPTAnalysis", x, gpt_analysis_tool), description="Analyzes portfolio and gives GPT investment advice"),
        Tool(name="PlotPrices", func=lambda x: log_tool_call("PlotPrices", x, plot_tool), description="Plots future trends for given stock symbols")
    ]

    llm = ChatOpenAI(temperature=0.3)
    agent = initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.OPENAI_FUNCTIONS,
        verbose=True
    )

    prompt = f"""
    The user has provided the following portfolio data and preferences:

    Portfolio (showing first {MAX_PORTFOLIO_ITEMS} items):
    {portfolio_str}

    User-Rated Risk: {risk_rating}
    ML-Predicted Risk: {predicted_risk}
    ESG Preference: {'Yes' if esg_preference else 'No'}
    Preferred Sectors: {', '.join(sectors) if sectors else 'None'}

    Please analyze the sample and give general suggestions. Do not invent fake stock tickers.
    """

    with st.expander("üß™ Agent Execution Log"):
        st.code(prompt, language="markdown")

    st.session_state.tool_trace = []
    result = agent.invoke({"input": {
        "portfolio": portfolio_data,
        "rating": risk_rating,
        "esg": esg_preference,
        "sectors": sectors
    }})
    st.success("‚úÖ Agent completed its analysis.")
    st.markdown("### üßæ Agent Output")

    with st.expander("üß∞ Tool Trace"), st.container():
        for trace in st.session_state.tool_trace:
            st.markdown(f"**{trace['tool']}**")
            st.code(f"Input: {trace['input']}")
            st.code(f"Output: {trace['output']}")
    st.write(result)

    if "AAPL" in result or "TSLA" in result:
        try:
            chart = get_price_forecast_plot(["AAPL", "TSLA"])
            st.image(f"data:image/png;base64,{chart}", caption="6-Month Forecast")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Could not render chart: {e}")

if st.button("üß† Run AI Agent"):
    run_agent()
