
from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
from app.utils import get_stock_price
from openai import OpenAI
import os
import json

app = FastAPI()
#openai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
openai = OpenAI(api_key="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")

class AssetItem(BaseModel):
    symbol: str
    quantity: float
    buy_price: float
    type: str  # STOCK or ETF

class PortfolioRequest(BaseModel):
    risk_rating: str
    sectors: List[str]
    esg_preference: bool
    portfolio: List[AssetItem]

@app.post("/analyze-portfolio-gpt")
async def analyze_portfolio_gpt(request: PortfolioRequest):
    lines = []
    for item in request.portfolio:
        current_price = get_stock_price(item.symbol)
        lines.append(
            f"- {item.symbol} ({item.type}): {item.quantity} units bought at ${item.buy_price}, current price ${current_price}"
        )

    sector_list = ", ".join(request.sectors)
    esg_text = "The user prefers ESG-compliant investments." if request.esg_preference else "ESG compliance is not required."

    prompt = (
        f"The customer has a {request.risk_rating} risk tolerance.\n"
        f"Preferred sectors: {sector_list}.\n"
        f"{esg_text}\n\n"
        f"Here is their current asset portfolio:\n\n"
        + "\n".join(lines) +
        "\n\nPlease analyze the portfolio and suggest up to 3 additional stocks or ETFs to BUY, SELL, or HOLD. Provide a reason for each."
    )

    function_schema = [
        {
            "name": "suggest_portfolio_adjustments",
            "description": "Provides portfolio rebalancing suggestions based on user risk and preferences.",
            "parameters": {
                "type": "object",
                "properties": {
                    "suggestions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "symbol": {"type": "string"},
                                "action": {"type": "string", "enum": ["BUY", "SELL", "HOLD"]},
                                "reason": {"type": "string"},
                                "type": {"type": "string", "enum": ["STOCK", "ETF"]}
                            },
                            "required": ["symbol", "action", "reason"]
                        }
                    }
                },
                "required": ["suggestions"]
            }
        }
    ]

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a financial assistant who always returns structured responses as per the function definition."},
            {"role": "user", "content": prompt}
        ],
        functions=function_schema,
        function_call="auto"
    )

    if response.choices[0].finish_reason == "function_call":
        function_args = json.loads(response.choices[0].message.function_call.arguments)
        suggestions = function_args["suggestions"]
    else:
        suggestions = []

    return {
        "summary": "Structured recommendations generated by GPT.",
        "suggestions": suggestions
    }
